*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /* все элементы (включая псевдо элементы всех элементов ::before и ::after)
  будут наследовать свойство box-sizing: border-box; от body */
}

html {
  font-size: 62.5%; // This defines what 1rem is

  /* Если для элемента html установить font-size в процентах, то процент берется от шрифта браузера по умолчанию.
  Браузеры по умолчанию ставят шрифт равным 16px, а нам нужен 10px, поэтому 62.5% от 16px это как раз 10px.
  Можно сразу жестко задать 10px, но тогда те пользователи,
  которые в настройках своих браузеров увеличили шрифт по умолчанию, не увидят эффекта увелечения шрифта,
  если мы жестко его перезапишем в 10px 
  
  Если бы это свойство использовалось только для шрифтов, то его можно было разместить в папку typograpy,
  но оно лежит в этой папке потомучто по задумке оно используется
  не только для шрифтов, но и для маржинов/паддингов и других размерностей устанавливаемых через rem */

  //MEDIA QUERIES
  @include respond(tab-land) { // width < 1200?
    font-size: 56.25%; // если я хочу, чтобы здесь 1rem был равен 9px, то 9/16 = 56.25%
    /* При ширине экрана меньше 1200px уменьшаем font-size, а так как от этого корневого размера берутся все rem для шрифтов
    и расстояний везде на всей странице, то соответственно всё пропорционально уменьшется везде на всей странице. */
  }

  @include respond(tab-port) { // width < 900?
    font-size: 50%; // 1rem = 8px, 8/16 = 50%
  }

  @include respond(big-desktop) { // width > 1800?
    font-size: 75%; // 1rem = 12, 12/16 = 75%
  }
}

body {
  box-sizing: border-box;
  padding: 3rem;

  @include respond(tab-port) { // width < 900?
    padding: 0;
  }
}

/*

Если к одному элементу применяется несколько одинковых свойств, то они последовательно применяются
и каждое последующее "затирает"(переопределяет) свойства предывущего и в итоге применится последнее свойство.
Например нельзя применить два раза к одному элементу свойство transform, ну применить то можно,
только применится самое последнее transform. Это касается всех свойств, и @media не исключение.

Разберем пример с двумя медиа запросами
@include respond(tab-land) { // width < 1200?
@include respond(tab-port) { // width < 900?

При ширине экрана в 1000px сначала сработает первый запрос и изменит шрифты
Потом сработает второй запрос, потому что так работает CSS, но последний запрос ничего не изменит,
потому что ширина экрана больше 900px и стили останутся те, которые были заданы первым медиа запросом.

При ширине экрана 700px сначала сработает первый запрос, потому что 700 < 1200 и изменит шрифты и т.д.
Но потом сработает второй запрос потому и переопределит стили по своему. 


*/

::selection {
  background-color: $color-primary;
  color: $color-white;
}