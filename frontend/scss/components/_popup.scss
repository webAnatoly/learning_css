.popup {
  width: 100vw;
  height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
  background-color: rgba($color-black, .8);
  z-index: 9999;
  opacity: 0;
  visibility: hidden;
  transition: all .3s;

  &__content {
    @include absoluteCenter;
    width: 75%;
    background-color: $color-white;
    box-shadow: 0 2rem 4rem rgba($color-black, .2);
    border-radius: 3px;
    display: table; // родительскому задаем table. Браузер для родительских дивов со свойствами display:table-cell автоматически задаст одинаковыю высоту
    overflow: hidden; // чтобы картинки не выходили за пределы родительского блока и не перекрывали border-radius
    opacity: 0;
    /* Если два свойства transform в правиле, то последнее перепишет предыдущее.
    Так у нас в миксине уже есть transform, то в этом последнем transform надо заново
    прописать translate(-50%, -50%). Ну или миксин не использовать а все вместе написать. */
    transform: translate(-50%, -50%) scale(0.3);
    transition: all .5s .2s; // .2s это delay

    @include respond(tab-port) {
      width: 90%;
      height: 95%;
      overflow: auto;
      display: block;
    }

    @include respond(phone) {
      text-align: center;
    }
  }

  &__left {
    width: 33.333333%;
    display: table-cell; // дочерним задаем table-cell

    @include respond(tab-port) {
      width: 100%;
      display: block;
      @include clearfix;
    }
  }

  &__right {
    width: 66.666666%;
    display: table-cell; // дочерним задаем table-cell
    vertical-align: middle; // вертикальное выравнивание в ячейке по центру
    padding: 3rem 5rem;

    @include respond(tab-port) {
      width: 100%;
      display: block;
      padding: 3rem;
    }

    @include respond(phone) {
      padding: 1rem;
    }
  }

  &__img {
    display: block;
    width: 100%;
    
    @include respond(tab-port) {
      width: 50%;
      height: 30rem;
      float: left;
    }
    @include respond(phone) {
      width: 100%;
    }
  }

  &__text {
    font-size: 1.1rem;
    margin-bottom: 2rem;

    column-count: 2;
    column-gap: 4rem;
    column-rule: 1px solid $color-grey-light-2;

    hyphens: auto; // автопереносы

    @include respond(tab-port) {
      column-count: 1;
    }
  }

  &:target {
    /*
    The pseudo class called target, which applies to the element which is the target
    when we click on a button, or basically when the URL changes to having target in it.
    Example:
    <a href="#popup">
    <div class="popup" id="popup">
    Селектор popup:target сработает когда мы кликнем по анкору <a href="#popup">
    Соответственно если мы кликнем на какой-нибудь другой <a href=#another-anchor> 
    то селектор &:target отменится, точнее выберется другой элемент с псевдоклассом target
    */
    opacity: 1;
    visibility: visible;
  }

  &:target &__content {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
  }

  &__close {
    &:link,
    &:visited {
      color: $color-grey-dark-1;
      position: absolute; // будет спозиционирован относительно того элемента в котором прописано свойство position. В нашем случае это элемент с классом popup__content
      top: 2.5rem;
      right: 2.5rem;
      font-size: 3rem;
      text-decoration: none;
      display: inline-block;
      outline: none;
      transition: all .2s;
      line-height: 1; // [Длинный коммент] так как в качестве крестика у нас тексты, то надо уменьшить line-height чтобы наш "x" выровнялся по высоте, потомучто для текста line-height браузером ставиться по самому высокому символу алфавита (как-то так, можно погуглить, но идея думаю ясна)
      z-index: 100;

      @include respond(tab-port) {
        &::after { // круглый белый фон для кнопки закрытия в респонсивной версии
          content: "";
          display: inline-block;
          width: 3rem;
          height: 3rem;
          background-color: $color-white;
          position: absolute;
          top: .2rem;
          left: -.7rem;
          border-radius: 50%;
          z-index: -1;
          box-shadow: 0 1rem 3rem rgba($color-black, .1);
        }
      }
    }

    &:hover {
      color: $color-primary;
    }
  }
}